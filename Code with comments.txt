Code with comments

class Ticket:
    counter = 1
    open_tickets = []
    closed_tickets = []

    def __init__(self, staff_id, creator_name, contact_email, description):
        # Initialize ticket attributes
        self.ticket_number = Ticket.counter + 2000  # Assign a unique ticket number
        self.staff_id = staff_id
        self.creator_name = creator_name
        self.contact_email = contact_email
        self.description = description
        self.response = "Not Yet Provided"  # Default response
        self.status = "Open"  # Default status is open
        Ticket.counter += 1  # Increment the ticket counter
        Ticket.open_tickets.append(self)  # Add the ticket to the list of open tickets

    def generate_password(self):
        # Generate a password for "Password Change" requests
        description = self.description.lower().strip()  # Normalize the description
        if "password change" in description:
            new_password = self.staff_id[:2] + self.creator_name[:3]  # Generate a new password
            return new_password
        return None  # Return None for non-password change requests

    def respond(self, response):
        # Set the response for the ticket
        self.response = response

    def close_ticket(self):
        # Close an open ticket
        if self.status == "Open":
            self.status = "Closed"  # Change status to closed
            Ticket.open_tickets.remove(self)  # Remove from open tickets list
            Ticket.closed_tickets.append(self)  # Add to closed tickets list

    def reopen_ticket(self):
        # Reopen a closed ticket
        if self.status == "Closed":
            self.status = "Reopened"  # Change status to reopened
            Ticket.closed_tickets.remove(self)  # Remove from closed tickets list
            Ticket.open_tickets.append(self)  # Add to open tickets list

    @classmethod
    def display_ticket(cls, ticket):
        # Display ticket information
        print("Ticket Number:", ticket.ticket_number)
        print("Ticket Creator:", ticket.creator_name)
        print("Staff ID:", ticket.staff_id)
        print("Email Address:", ticket.contact_email)
        print("Description:", ticket.description)
        print("Response:", ticket.response)
        print("Ticket Status:", ticket.status)
        print()

    @classmethod
    def display_ticket_statistics(cls):
        # Display ticket statistics
        total_tickets = len(Ticket.open_tickets) + len(Ticket.closed_tickets)
        resolved_tickets = len(Ticket.closed_tickets)
        open_tickets = len(Ticket.open_tickets)
        print("Tickets Created:", total_tickets)
        print("Tickets Resolved:", resolved_tickets)
        print("Tickets To Solve:", open_tickets)
        print()

def main():
    while True:
        # Display menu options
        print("Options:")
        print("1. Create a Ticket")
        print("2. Resolve a Ticket")
        print("3. Reopen a Ticket")
        print("4. Close a Ticket")
        print("5. Display Ticket Statistics")
        print("6. Quit")

        choice = input("Enter your choice: ")

        if choice == '1':
            # Create a new ticket
            staff_id = input("Enter Staff ID: ")
            creator_name = input("Enter Creator Name: ")
            contact_email = input("Enter Contact Email: ")
            description = input("Enter Description of the issue: ")
            ticket = Ticket(staff_id, creator_name, contact_email, description)
            print(f"Ticket created successfully with Ticket Number: {ticket.ticket_number}")

        elif choice == '2':
            # Resolve a ticket
            ticket_number = int(input("Enter Ticket Number to resolve: "))
            for ticket in Ticket.open_tickets:
                if ticket.ticket_number == ticket_number:
                    new_password = ticket.generate_password()
                    if new_password:
                        ticket.respond(f"New password generated: {new_password}")
                        ticket.close_ticket()
                        print(f"Ticket {ticket_number} resolved successfully!")
                    else:
                        print("This ticket is not a 'Password Change' request.")
                    break
            else:
                print(f"Ticket with number {ticket_number} not found in open tickets.")

        # ... (similar comments for other menu options)

        elif choice == '6':
            print("Exiting the program.")
            break

        else:
            print("Invalid choice. Please choose a valid option.")

if __name__ == "__main__":
    main()
